@{
    ViewBag.Title = "Master's Scoreboard";
}
@Styles.Render("~/Content/css")
<style>
    body {
        background: url(../images/masters.jpg) center center no-repeat fixed;
        background-size: cover;
    }
    .nav_masters a {
        background-color: #ddd;
    }
</style>
<script>

    var config = {
        location: {
            address: '2604 Washington Rd, Augusta, GA 30904',
            lat: '33.50058',
            lng: '-82.02205400000001'
        },
        backgrounds: {
            default: 'masters.jpg',
            raining: 'masters-raining.jpg'
        }
    };

    var base_url = '/Scoreboard';
    if (window.location.hostname == 'localhost')
        base_url = '';

    angular.module('scoreboardApp', []).controller('ScoreboardCtrl', function ($scope, $http) {
        $scope.showPlayerRankings = false;
        $scope.refresh = 30;
        $scope.personPredicate = 'score';
        $scope.personReverse = false;
        $scope.pickPredicate = 'scoreKey';
        $scope.pickReverse = false;
        $scope.playerPredicate = 'scoreKey';
        $scope.playerReverse = false;
        $scope.cutLine = 'E';
        $scope.cutPenalty = 'E';
        $scope.totalScore = 0;
        $scope.avgScore = 0;
        $scope.showPenalty = true;

        $scope.scores = {};
        $scope.scoreCache = {};

        $scope.jeremyL = {
            'name': 'Jeremy Lizza',
            'score': 0,
            'expanded': true, 
            'picks': [
                { 'id': '28089', 'tier': 'A' },
                { 'id': '32102', 'tier': 'B' },
                { 'id': '30925', 'tier': 'B' },
                { 'id': '26499', 'tier': 'C' },
                { 'id': '26596', 'tier': 'C' },
                { 'id': '33448', 'tier': 'C' },
                { 'id': '30978', 'tier': 'D' },
                { 'id': '47959', 'tier': 'D' },
                { 'id': '34409', 'tier': 'D' },
                { 'id': '33122', 'tier': 'D' }
            ]
        };


        $scope.shenanigans = [$scope.jeremyL];

        $scope.scoresCallback = function (scores) {
            $scope.scores = scores.homeScores;
            $scope.cutLine = '';
            $scope.cutPenalty = '';
            $scope.totalScore = 0;
            $scope.avgScore = 0;

            $scope.cutLine = '';
            $scope.cutPenalty = '';
            // Add data to each player for who has picked them
            for (var i = 0; i < $scope.scores.player.length; i++) {
                // Masters:  Top ?? Advance
                var position = $scope.scores.player[i].pos;
                if (position.substring(0, 1) == 'T')
                    position = parseInt(position.substring(1, position.length));
                // Masters:  Cut = +3 or worse
                //if (position <= 70)
                //    $scope.cutLine = $scope.scores.player[i].score;

                // Masters:  80th Percentile is position 78
                //if (position > 77 && $scope.cutPenalty == '')
                //    $scope.cutPenalty = $scope.scores.player[i].score;

                $scope.scores.player[i].pickedBy = "";
                $scope.scores.player[i].scoreKey = $scope.getScoreNumber($scope.scores.player[i].score);
                $scope.scores.player[i].todayKey = $scope.getScoreNumber($scope.scores.player[i].today);
                if (typeof $scope.scoreCache[$scope.scores.player[i].id] == 'undefined')
                    $scope.scores.player[i].status = 'scoreHold';
                else
                    $scope.scores.player[i].status = $scope.scoreCache[$scope.scores.player[i].id].status;
            }

            // Add a projected cut penalty
            for (var i = 0; i < $scope.scores.player.length; i++) {
                var position = $scope.scores.player[i].pos;
                if (position.substring(0, 1) == 'T')
                    position = parseInt(position.substring(1, position.length));
            
                if (position == 'MC' || $scope.scores.player[i].thru == 'WD') {
                    $scope.scores.player[i].cutPenalty = 2 * $scope.cutPenalty;
                }
                else if (position == 1) {
                    $scope.scores.player[i].cutPenalty = (2 * $scope.getScoreNumber($scope.cutPenalty)) * -1
                    //found someone in first
                    console.log("Found it! " + JSON.stringify($scope.scores.player[i]));
                }
                else
                    $scope.scores.player[i].cutPenalty = '';

                $scope.totalScore += $scope.getScoreNumber($scope.scores.player[i].score);
            }

            $scope.avgScore = Math.ceil($scope.totalScore / ($scope.scores.player.length));

            for (var i = 0; i < $scope.shenanigans.length; i++) {
                var currentPerson = $scope.shenanigans[i];
                currentPerson.score = 0;
                currentPerson.base = 0;
                currentPerson.cutPenalty = 0;
                currentPerson.cutPlayers = 0;
                for (var j = 0; j < currentPerson.picks.length; j++) {
                    var currentPlayer = currentPerson.picks[j];
                    var info = $scope.matchPlayerInfo(currentPlayer.id, currentPerson.name);
                    currentPlayer.pos = info.pos;
                    currentPlayer.name = info.fName + ' ' + info.lName;
                    currentPlayer.score = info.score;
                    currentPlayer.today = info.today;
                    currentPlayer.thru = info.thru;
                    currentPlayer.status = info.status;
                    currentPlayer.cutPenalty = info.cutPenalty;
                    currentPlayer.scoreKey = $scope.getScoreNumber(info.score);
                    if (info.cutPenalty != '') {
                        currentPerson.cutPenalty += info.cutPenalty;
                        currentPerson.cutPlayers += 1;
                    }
                    var todayString = 'E';
                    if (currentPlayer.today == 'E' || currentPlayer.today.substring(0, 1) == '+' || currentPlayer.today.substring(0, 1) == '-') {
                        todayString = currentPlayer.today;
                    }
                    if (currentPlayer.score == 'E' || currentPlayer.score.substring(0, 1) == '+' || currentPlayer.score.substring(0, 1) == '-') {
                        currentPlayer.todayKey = $scope.getScoreNumber(todayString);
                        currentPerson.score += $scope.getScoreNumber(info.score);
                        if (currentPlayer.pos == "WD") {
                            currentPlayer.score = 'WD';
                        }
                        currentPerson.base += (currentPlayer.scoreKey - currentPlayer.todayKey);
                    }

                    if (typeof $scope.scoreCache[info.id] == 'undefined') {
                        $scope.scoreCache[info.id] = { 'thru': info.thru, 'score': info.scoreKey, 'status': 'scoreHold' };
                    } else {
                        var cache = $scope.scoreCache[info.id];
                        if (info.thru != cache.thru) {
                            if (info.scoreKey > cache.score) {
                                cache.status = 'scoreIncrease';
                            } else if (info.scoreKey < cache.score) {
                                cache.status = 'scoreDecrease';
                            } else {
                                cache.status = 'scoreHold';
                            }
                            cache.thru = info.thru;
                            cache.score = info.scoreKey;
                        }
                    }
                }
                if ($scope.showPenalty) {
                    currentPerson.score += currentPerson.cutPenalty;
                }
            }

        };

        $scope.getDelta = function (person) {
            var delta = person.score - person.base;
            if ($scope.showPenalty)
                delta = delta - person.cutPenalty;
            var value = "";
            if (delta > 0)
                value = "+" + delta;
            else if (delta == 0)
                value = "E";
            else
                value = delta;

            return value;
        };

        $scope.setExpanded = function (value) {
            for (var i = 0; i < $scope.shenanigans.length; i++)
                $scope.shenanigans[i].expanded = value;
        };

        $scope.getScoreNumber = function (scoreString) {
            if (scoreString == 'E' || scoreString == '')
                return 0;
            else
                return parseInt(scoreString);
        };

        $scope.matchPlayerInfo = function (id, pickedBy) {
            for (var i = 0; i < $scope.scores.player.length; i++) {
                if (id == $scope.scores.player[i].id) {
                    if ($scope.scores.player[i].pickedBy.indexOf(pickedBy) == -1) {
                        if ($scope.scores.player[i].pickedBy.length > 0)
                            $scope.scores.player[i].pickedBy += ", ";
                        $scope.scores.player[i].pickedBy += pickedBy;
                    }

                    var result = $scope.scores.player[i];
                    if (result.score == '')
                        result.scoreKey = 0;
                    if (result.thru == '')
                        result.thruKey = 0;

                    return result;
                }
            }

            return { name: '', score: '', thru: '', today: '', status: 'scoreHold' };
        };

        $scope.loadData = function () {
            $http.get(base_url + '/api/scoreboard/masters/2017').success($scope.scoresCallback);
        };

        $scope.refreshingIn = function () {
            if ($scope.refresh == 0) {
                $scope.refresh = 30;
                $scope.loadData();
            } else
                $scope.refresh = $scope.refresh - 1;

            $scope.$apply($scope.refresh);
        };

        $scope.setPlayerSort = function (sort) {
            if (sort == 'default') {
                $scope.playerReverse = false;
                $scope.playerPredicate = 'scoreKey';
            } else if (sort == $scope.playerPredicate) {
                $scope.playerReverse = !$scope.playerReverse;
            } else {
                $scope.playerReverse = false;
                $scope.playerPredicate = sort;
            }
        };

        $scope.loadData();

        setInterval($scope.refreshingIn, 1000);
    });


    </script>

